BACKEND NOTES ---

we need node js to get started wiht bakend 
firt on an empyty folder we need to run  'npm init' command
by doing that you will get the package.json file in thta file under scipts you can give your own commnds like this:
"start": "node index.js"


 with express it assign a virtual port on your machine to the 
 express port.

 in the express we const app = express();

 with app you can use various methods on the app like get , listen 

 after that we need to install the dotenv package and create the .env
  file becouse to put you app into the production we need to do that.

  .env file will replace the port with available port on the    
  server

## vid 2
  now : you can use the digitaloccean to host this app onto the production
  just upload the git repo in the digitaloccean to host this app

  
   CORS error : it denies the access to the react website

   to handle that you can install npm cors package
   
proxy : is the way to stadarization of the url 


you can add this text in your vite.config file and it will append the path to starting of the API

  server:{
    proxy:{
      '/api':'http://localhost:3000'
    },
  },

npm run build : WIht these commond a satic version of the you r react app will 
build with html , css , js. dist folder will contian all the html and css and js file. 
and you can use app.use(express.static('dist))
  
but you have to put your dist folder into the backend folder and then you can 
use  app.use(express.static('dist)) this code in server.js file to give a static version of react app 
to backend. 

{But this all considerred a bad practise to do all these}
 

// moon modler is the tool which is used to for data modling  
#link : codesnadbox , github codespace , stackblitz

when passing the schema to the #mogoose.model("User" , userScema)
At time of of the storing the value in the mogoDB it store as the pural means User became Users 's' is attched to the every database name when passsign it 


#mogoose.model("User" , userScema)

here User is the database name and userScema is the schema on which is the table in gonna form 

Users became users  in the actual mongDB database


======================This is the example of the data modling of database in the mongoose 

import mongoose from 'mongoose';

const hospitalSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    addressLine1: {
      type: String,
      required: true,
    },

    addressLine2: {
      type: String,
    },

    city: {
      type: String,
      required: true,
    },

    pincode: {
      type: String,
      required: true,
    },
    specializedIn: [
      {
        type: String,
      },
    ],
  },
  { timesstamps: true }
);

export const Hospital = mongoose.model('Hospital', hospitalSchema);

=============== How to setup the professional backend project =====

so create a new project and use npm init it will create the package.json file and after that we need to create the 
public and src folder in that folder. in src folder we keep the files of source of the project and in public folder we keep the static files. 
After that create the .env file to keep the confidential data of the project. 

  install the nodemon package as a dev dependency becouse it will restart the server automatically when you make any changes in the code.
  you can install it like this 
  npm i -D nodemon
  after that make some change in the package.json file  : 
  "scripts": {
    "dev": "nodemon /src/index.js"
  },
  
  after that we have install the prettier package as the dev dependency like this  : npm i -D prettier 
  it will help us to have an common code formator between teams so that it does'nt give an small error aftet that we 
  need to create the .prettierrc and .prettieringnore files and add the appropriate code in it.
  
  =========== How to connet databse in MERN ============

  So to connect that mongoDB database we need to go to the mongoDB atlas page it is free service from the mongoDB to get access to the database.
  After that create a account on that website and create your cluster you can do it all that for free. 

  2 personal things to consider while dealing with databses : 
    always wrap the database code with try catch or promises 
    and always use asnync becouse your databse is always in another continent.
    
======================Custom API respoce and error handling ===========
so first of all we need to install some library for that first is 
cors and second is cookie-parser 
and then in express app we need to import that library and use it like this : 
    const app = express();
    app.use(cors({
    origin: process.env.CORS_ORIGIN,
    credentials: true

    }))

    app.use(express.json({limit: "16kb"}))

middleware is nothing but an falg which we is present in the url to check some data. 
